syntax = "proto3";
package com.gonuclei.ucf.v1;
option java_package = "com.bizdirect.proto.messages";

message BizdirectGenericRequest {

    oneof channel_type_message {

        BizdirectMessage bizdirect_message = 1;

        BizdirectBulkMessage bizdirect_bulk_message = 2;

        NonUserMessage non_user_message = 3;

    }

}

message BizdirectMessage {

    string device_id = 1;

    string user_uid = 2;

    map<string, string> properties_list = 3;

    TemplateUniqueIdentifierModel unique_identifier_model = 4;

}

message NonUserMessage {

    TemplateUniqueIdentifierModel unique_identifier_model = 1;

    map<string, string> properties_list = 2;

    string country_code = 3;

    string mobile_number = 4;

    string email_id = 5;

    repeated EmailAttachment attachment = 6;

}

message TemplateUniqueIdentifierModel {

    int32 partner_id = 1;

    repeated ChannelType channel_type = 2;

    string template_type = 3;

    int32 category_id = 4;

    int32 language_id = 5[deprecated=true];

    string language = 6; // ISO language code, e.g. "en"
}

message BizdirectBulkMessage {

    MulticastMessageTypeEnum message_type_enum = 1;

    repeated string target_audience = 2;

    map<string, string> properties_list = 3;

    TemplateUniqueIdentifierModel unique_identifier_model = 4;

}

enum MulticastMessageTypeEnum {

    TYPE_BULK_MESSAGE = 0;

    TYPE_TOPIC_MESSAGE = 1;

}

message Empty {

    ResponseStatus response_status = 1;

}

enum ChannelType {

    EMAIL = 0;

    SMS = 1;

    PUSH = 2;

}

message BizdirectGenericlTypeMessage {

    oneof channel_type_message {

        BizdirectEmailMessage bizdirect_email_message = 1;

        BizdirectSmsMessage bizdirect_sms_message = 2;

        BizdirectIvrMessage ivr_message = 3;

    }

}

// SMS data :
enum SmsType {

    TEXT = 0;

    UNICODE = 1;

}

message MetaData {

    ChannelType channel_type = 1;

    int32 partner_id = 2;

    string service_name = 3;

    bool acknowledge = 4;

    bool retry_on_fail = 5;

    int32 category_id = 6;

    string template_type = 7;

}

message BizdirectSmsMessage {

    MetaData meta_data = 1;

    /*
    * The user chooses either to send a single sms or send in bulk.
    */
    oneof channel_message {

        SmsChannelMessage sms_channel_message = 2;

        BulkSmsChannelMessage bulk_sms_channel_message = 3;
    }


}

message BaseSmsMessage {

    string sender_id = 1;


    oneof content {

        /*
        * The template should be of Apache velocity template 2.0 format.
        * Refer to documentation here: http://velocity.apache.org/engine/2.0/user-guide.html
        */
        string content_template = 2;

        string content_text = 3;

    }


}

message SmsChannelMessage {

    BaseSmsMessage base_sms_message = 1;

    SmsInfo sms_info = 2;

    SmsType sms_type = 3;


}

message BulkSmsChannelMessage {

    BaseSmsMessage base_sms_message = 1;

    repeated SmsInfo sms_info_list = 2;

}

message SmsInfo {

    string country_code = 1;

    string mobile_number = 2;

    /*
    * Information to identify the event when sent to a acknowledgement topic.
    * This custom inforation will also be passed on to 3rd party service to identify the status
    * when called via a webhook.
    */
    map<string, string> custom_info = 3;

    /*
    * Will not have aby affect if context_text is set in BaseSmsMessage.
    * only valid for content_template.
    */
    map<string, string> place_holders = 4;

    string message_id = 5;

}

enum NotificationStatus {

    SCHEDULED = 0;

    SCHEDULE_FAILED = 1;

    DELIVERED = 2;

    UNKNOWN = 3;

}

message SmsNotificationAcknowledgement {

    string country_code = 1;

    string mobile_number = 2;

    NotificationStatus status = 3;

    map<string, string> error_map = 4;

}

// Email data:

enum EmailType {

    HTML = 0;

    EMAILTEXT = 1;

}

// reuse MetaData of sms

message BizdirectEmailMessage {

    MetaData meta_data = 1;

    /*
    * The user chooses either to send a single sms or send in bulk.
    */
    oneof channel_message {

        EmailChannelMessage email_channel_message = 2;

        BulkEmailChannelMessage bulk_email_channel_message = 3;
    }


}

message BaseEmailMessage {


    string from = 1;

    string from_name = 6;


    oneof content {

        /*
        * The template should be of Apache velocity template 2.0 format.
        * Refer to documentation here: http://velocity.apache.org/engine/2.0/user-guide.html
        */
        string content_template = 2;

        string content_text = 3;

    }

    oneof subject {

        string subject_template = 4;

        string subject_text = 5;

    }


}

message EmailChannelMessage {

    BaseEmailMessage base_email_message = 1;

    EmailInfo email_info = 2;

    EmailType email_type = 3;


}

message BulkEmailChannelMessage {

    BaseEmailMessage base_email_message = 1;

    repeated EmailInfo email_info = 2;

    repeated EmailAttachment attachment = 3;

}


message EmailAttachment {

    string url = 1;

    string name = 2;
}

message EmailInfo {

    string to = 1; // have to make list

    string cc = 2; // have to make list

    string bcc = 3; // have to make list

    /*
    * Information to identify the event when sent to a acknowledgement topic.
    * This custom inforation will also be passed on to 3rd party service to identify the status
    * when called via a webhook.
    */
    map<string, string> custom_info = 4;

    repeated EmailAttachment attachment = 5;

        /*
    * Will not have aby affect if context_text is set in BaseSmsMessage.
    * only valid for content_template.
    */
    map<string, string> content_placeholders = 6;

    map<string, string> subject_placeholders = 7;


    string message_id = 8;

    EmailType email_type = 9;
    
    repeated string cc_list = 10;

    repeated string bcc_list = 11;

    repeated string to_list = 12;

    string from = 13;
}


message EmailNotificationAcknowledgement {

    string to = 1;

    string from = 2;

    NotificationStatus status = 3;

    map<string, string> error_map = 4;

    map<string, string> custom_info = 5;


}

message BizdirectIvrMessage {

    string mobileNumber = 1;

    string otp = 2;

}

message RetryKafkaPayload {

    string provider_name = 1;

    ChannelType channel_type = 2;

}

message ResponseStatus {

    ResponseCode response_code = 1;
    ResponseCodeCause response_code_cause = 2;
    string response_message = 3;
}

enum ResponseCode {
    DUMMY_CODE = 0;
    SUCCESS = 1;
    FAILED = 2;
    SERVICE_NOT_AVAILABLE = 3;
    AUTH_FAIL = 4;
    VALIDATION_FAILED = 5;
    NOT_FOUND = 6;
    CONSTRAINT_VIOLATION = 7;
    FIELD_MISMATCH = 8;
}

enum ResponseCodeCause {
    NO_SPECIFIC_CAUSE = 0;
    ORDER_CREATION_FAILED = 1;
    ORDER_CREATION_SUCCESS_PAYMENT_INITIATION_FAILED = 2;
    REFUND_INITIATED_FAILED = 3;
    CART_ALREADY_EXISTS = 4;
    PAYMENT_FAILED = 5;
    BLOCKING_FAILED = 6; // block an amount, without payment.
    SERVICE_ERROR_CAUSE = 7;
}
