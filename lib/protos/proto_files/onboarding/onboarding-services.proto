syntax = "proto3";
package ae.falcon.onboarding.v1;
option java_package = "ae.falcon.onboarding.v1.services";
import "onboarding-messages.proto";
import "common-messages.proto";
import "google/protobuf/empty.proto";

service OnboardingSecureService {

    // Rpc to set lock phone lock or device lock.
    rpc SetLock (SetLockRequest) returns (SetLockResponse);

    // Rpc to fetch all the preference that app supports.
    // It also marks preferences which user has selected.
    rpc FetchPreferences (google.protobuf.Empty) returns (FetchPreferencesResponse);

    // Rpc to set user preferences.
    rpc SetPreferences (SetPreferencesRequest) returns (ResponseMessage);

    // Rpc to mark on boarding complete and trigger card verification.
    rpc UpdateOnBoardingStatus(OnBoardingStatusRequest) returns (ResponseMessage);

    //  Rpc to fetch user profile details.
    rpc FetchUserProfile (google.protobuf.Empty) returns (FetchUserProfileResponse);

    // Rpc to update user profile details.
    rpc UpdateUserProfile (UpdateUserProfileRequest) returns (ResponseMessage);
}

service OnboardingService {

    // Rpc to check whether phone or emailId is already registered.
    rpc ValidateUserInput (ValidateUserInputRequest) returns (ResponseMessage);

    // Rpc to generate, send and resend otp for emailId or phoneNumber.
    rpc SendOtp (SendOtpRequest) returns (SendOtpResponse);

    // Rpc to validate otp.
    rpc ValidateOtp (ValidateOtpRequest) returns (ValidateOtpResponse);

    // Rpc to signUp (validate user details and create user).
    rpc SignUp (SignUpRequest) returns (UserAuthenticationResponse);

    // Rpc to login user using password, pin or device lock.
    rpc Login (LoginRequest) returns (UserAuthenticationResponse);

    // Rpc to set user password.
    rpc ResetPassword (ResetPasswordRequest) returns (ResponseMessage);

    // Rpc to fetch masked phone number and emailId.
    rpc FetchIdentifier (FetchIdentifierRequest) returns (FetchIdentifierResponse);

    // Rpc to logout user. (invalidate device lock and jwt)
    rpc Logout (google.protobuf.Empty) returns (ResponseMessage);

    // Rpc to check is user registered or not.
    rpc IsUserRegistered (UserInputRequest) returns (ResponseMessage);
}

service OnboardingEncryptedSecureService{

    // Rpc to set lock phone lock or device lock.
    rpc SetLock (EncryptedMessage) returns (EncryptedMessage);

    // Rpc to fetch all the preference that app supports.
    // It also marks preferences which user has selected.
    rpc FetchPreferences (EncryptedMessage) returns (EncryptedMessage);

    // Rpc to set user preferences.
    rpc SetPreferences (EncryptedMessage) returns (EncryptedMessage);

    // Rpc to mark on boarding complete and trigger card verification.
    rpc UpdateOnBoardingStatus(EncryptedMessage) returns (EncryptedMessage);

    //  Rpc to fetch user profile details.
    rpc FetchUserProfile (EncryptedMessage) returns (EncryptedMessage);

    // Rpc to update user profile details.
    rpc UpdateUserProfile (EncryptedMessage) returns (EncryptedMessage);

}

service OnboardingEncryptedService {

    // Rpc to check whether phone or emailId is already registered.
    rpc ValidateUserInput (EncryptedMessage) returns (EncryptedMessage);

    // Rpc to generate, send and resend otp for emailId or phoneNumber.
    rpc SendOtp (EncryptedMessage) returns (EncryptedMessage);

    // Rpc to validate otp.
    rpc ValidateOtp (EncryptedMessage) returns (EncryptedMessage);

    // Rpc to signUp (validate user details and create user).
    rpc SignUp (EncryptedMessage) returns (EncryptedMessage);

    // Rpc to login user using password, pin or device lock.
    rpc Login (EncryptedMessage) returns (EncryptedMessage);

    // Rpc to set user password.
    rpc ResetPassword (EncryptedMessage) returns (EncryptedMessage);

    // Rpc to fetch masked phone number and emailId.
    rpc FetchIdentifier (EncryptedMessage) returns (EncryptedMessage);

    // Rpc to logout user. (invalidate device lock and jwt)
    rpc Logout (EncryptedMessage) returns (EncryptedMessage);

    // Rpc to check is user registered or not.
    rpc IsUserRegistered (EncryptedMessage) returns (EncryptedMessage);
}